@page "/adminportal"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
<!--inject Applic-->

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using CRT_WebApp.Client.Services.UserService;
@using CRT_WebApp.Shared.DTO;


<h3>AdminPortal</h3>

<div class="container">
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in UserService.Users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Email</td>
                    <td>
                        <button type="button" name="btnRemoveUser" class="btn-primary"
                                @onclick="() => EditUser(user.Id)">
                            Delete
                        </button>
                    </td>


                </tr>

            }
        </tbody>
    </table>

    @if (showPopup == true)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit User</h3>
                        <!-- Close popup button-->
                        <button type="button" class="close" @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- edit form for user-->
                    <div class="modal-body">
                        <!--display ID only if not new user-->
                        @if (objUser.Id != "")
                        {
                            <p>@objUser.Id</p>
                        }
                        <!-- allow edit only if new user-->
                        @if (objUser.Id != "")
                        {
                            <p>@objUser.UserName</p>
                        }
                        else
                        {
                            <input class="form-control" type="text"
                                   placeholder="UserName"
                                   @bind="objUser.UserName" />
                        }
                        <input class="form-control" type="text"
                               placeholder="Email"
                               @bind="objUser.Email" />
                        <input class="form-control" type="password"
                               placeholder="Password"
                               @bind="objUser.PasswordHash" />
                        <!--
                    <select class="form-control"
                            @bind="@currUserRole">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                        -->
                        <br /> <br />

                        <!--Save user button-->
                        <button class="btn btn-primary" @onclick="() => CreateUser(objUser.Email, objUser.PasswordHash)">Save</button>

                        <!-- edit form for user
    <div class="modal-body">
    <EditForm Model="@userRegistrationDto" OnValidSubmit="@CreateUser">
        <div class="input-group mb-3">
            <InputText class="form-control" placeholder="Email" @bind-Value="@userRegistrationDto.Email" />
            <InputText class="form-control" placeholder="Password" @bind-Value="@userRegistrationDto.Password" />
            <InputText class="form-control" placeholder="Confirm password" />
        </div>
    </EditForm>
    <br /> <br />
    Save user button
    <button class="btn btn-success" type="submit">Save</button> -->
                        <!-- show delete button only if not new record-->
                        @if (objUser.Id != "")
                        {
                            <button class="btn btn-primary" @onclick="@(() => DeleteUser(objUser.Id))">Delete</button>
                        }
                        <br />
                        <span style="color:red">@errString</span>
                    </div>
                    </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AddUser">Add User</button>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMIN_ROLE = "admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    private IdentityUser objUser = new IdentityUser();
    string currUserRole { get; set; } = "User";
    List<string> Options = new List<string>() { "User", "Admin" };
    List<IdentityUser> Users = new List<IdentityUser>();
    string errString = "";
    bool showPopup = false;

    UserRegistrationDto userRegistrationDto = new UserRegistrationDto();
    UserService userService;

    private void EditUser(string userID)
    {

    }

    private  void CreateUser(string email, string password)
    {
        this.userRegistrationDto.Email = email;
        this.userRegistrationDto.Password = password;
        this.userRegistrationDto.ConfirmPassword = password;
        Console.WriteLine(userRegistrationDto.Email);
        SaveUser();
    }

    private void AddUser()
    {
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        objUser.Id = "";
        showPopup = true;
    }

    protected override async void OnInitialized()
    {
        try
        {
            UserService.OnChange += StateHasChanged;
            await UserService.LoadAllUsers();
            userService = new UserService(new HttpClient());
            CurrentUser = (await authenticationStateTask).User;
        }
        catch (Exception e)
        {
            Console.WriteLine("initialization error");
        }
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }

    public void ShowUsers()
    {
        errString = "";

    }
    public void AssignRole(string userID, string roleID)
    {
        UserService.AddRoleToUser(userID, roleID);
    }

    public void SaveUser()
    {
        Console.WriteLine(" save user email: " + userRegistrationDto.Email);
 
        UserDto userDto = new UserDto();
        userDto.Email = userRegistrationDto.Email;
        userDto.Password = userRegistrationDto.Password;
        UserService.RegisterUser(userDto);

    }

    public async Task DeleteUser(string userID)
    {
        await UserService.DeleteUser(userID);
    }

    public void ClosePopup()
    {
        showPopup = false;
    }

}

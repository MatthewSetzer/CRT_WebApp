@inject IItemService ItemService
@using CRT_WebApp.Shared
@implements IDisposable;


<div class="col-6 col-md-4">

    <label>Select Assembly Item:</label>
    <div class="input-group mb-3">
        <input class="form-control" type="text" list="itemList" />
        <datalist id="itemList" @onchange="@((args) => description = args.Value.ToString())">
            @for (var i = 0; i < ItemService.Items.Count; i++)
            {
                <option value="@ItemService.Items[i].Description" />
            }
        </datalist>
    </div>
    <label>Quantity: </label>
    <div class="input-group mb-3">
        <select class="custom-select" id="metricSelect">
            <option selected>Select...</option>
            <option value="1">Quantity</option>
            <option value="2">Linear Foot</option>
            <option value="3">Square Foot</option>
        </select>
        <input type="number" @bind="metric" @oninput="@((e) => { metric = (double)e.Value; })" class="form-control">
    </div>


    <label>Rate: </label>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text">$</span>
        </div>
        <input type="number" @bind="rate" @oninput="@((e) => { rate = (double)e.Value; })" class="form-control">
        <div class="input-group-append">
            <span class="input-group-text">.00</span>
        </div>
    </div>
    <button class="btn btn-success ml-auto">Add to Sub-Group</button>
    <hr />
    <div class="input-group mb-3">
        <input @bind="addedItem" @oninput="@((e) => { addedItem = (string)e.Value; })" type="text" class="form-control">
    </div>
    <button class="btn btn-secondary" @onclick="addItem">Manually Add Assembly Item</button>
</div>



@code {
    private double rate;
    private double metric;
    private string description;
    private string addedItem;

    AssemblyItemModel assemblyItem = new AssemblyItemModel();

    //---------------------------------------------------------------------------------------------------------//
    protected override void OnInitialized()
    {
        ItemService.OnChange += StateHasChanged;
        LoadItems();
    }
    //---------------------------------------------------------------------------------------------------------//
    public void Dispose()
    {
        ItemService.OnChange -= StateHasChanged;
    }
    //---------------------------------------------------------------------------------------------------------//
    public void addItem()
    {
        ItemModel newItem = new ItemModel { Description = addedItem };
        ItemService.AddItem(newItem);
    }
    //---------------------------------------------------------------------------------------------------------//
    public void LoadItems()
    {
        ItemService.LoadItems();
    }

    public void addToSubGroup()
    {


    }
    //-------------------------------------...ooo000 END OF CODE 000ooo...-------------------------------------//
}

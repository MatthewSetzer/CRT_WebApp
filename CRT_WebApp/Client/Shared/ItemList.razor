@inject IItemService ItemService
@inject ISubGroupService SubGroupService
@inject IAssemblyItemService AssemblyItemService
@using CRT_WebApp.Shared
@using CRT_WebApp.Client.Shared.SubGroup
@implements IDisposable;

<div class="row">
    <div class="col-6">
        <EditForm Model="@Item" OnValidSubmit="@addItem">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">Select Assembly Item: </span>
                </div>
                <InputText class="form-control" type="text" list="itemList" @bind-Value=Item.Description />
                <datalist id="itemList" @onchange="@((args) => Item.Description = args.Value.ToString())">
                    @for (var i = 0; i < ItemService.Items.Count; i++)
                    {
                        <option value="@ItemService.Items[i].Description" />
                    }
                </datalist>
            </div>
            <label>Quantity: </label>
            <div class="input-group mb-3">
                <select class="custom-select" id="metricSelect">
                    <option selected>Select...</option>
                    <option value="1">Quantity</option>
                    <option value="2">Linear Foot</option>
                    <option value="3">Square Foot</option>
                </select>
                <InputNumber id="Quantity" @bind-Value="Item.Quantity"></InputNumber>
            </div>

            <label>Rate: </label>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text">$</span>
                </div>
                <InputNumber id="Rate" @bind-Value="Item.Rate"></InputNumber>
            </div>

            <button class="btn btn-primary" type="submit">Add Item</button>

        </EditForm>
    </div>


    <div class="col-6">
        <EditForm Model="@SubGroup" OnValidSubmit="@addSubGroup">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">Sub Group Title:</span>
                </div>
                <InputText class="form-control" type="text" aria-label="Sizing example input"
                           aria-describedby="inputGroup-sizing-default" @bind-Value="SubGroup.SubGroupTitle" />
                <div class="input-group-append">
                    <button class="btn btn-success" type="submit">Add Sub-Group</button>
                </div>
            </div>
        </EditForm>
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Description</th>
                    <th scope="col">Number of Units</th>
                    <th scope="col">Rate</th>
                    <th scope="col">Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in AssemblyItemService.AssemblyItems)
                {
                    <tr>
                        <td>@item.Description</td>
                        <td>@item.NumberOfUnits</td>
                        <td>$@item.GetFormattedRate()</td>
                        <td>$@item.GetFormattedTotalPrice()</td>
                    </tr>
                }
            </tbody>
        </table>
        <label>Sub Total: $@SubGroup.GetFormattedSubTotal()</label>
    </div>
</div>
<br />
<br />
<div>
    <SubGroupList></SubGroupList>
</div>

@code {
    private AssemblyItemViewModel Item = new();
    private List<AssemblyItemModel> Items = new();

    private SubGroupViewModel SubGroup = new();
    private List<SubGroupModel> SubGroups = new();

    //---------------------------------------------------------------------------------------------------------//
    protected override void OnInitialized()
    {
        ItemService.OnChange += StateHasChanged;
        
        LoadItems();
    }
    //---------------------------------------------------------------------------------------------------------//
    private void addItem()
    {
        AssemblyItemModel assemblyItem = new AssemblyItemModel
        {
            Description = Item.Description,
            Rate = Item.Rate,
            NumberOfUnits = Item.Quantity
        };
        AssemblyItemService.AddAssemblyItemToList(assemblyItem);

        SubGroup.SubTotal += Item.Rate * Item.Quantity;

        Item = new AssemblyItemViewModel();
    }
    //---------------------------------------------------------------------------------------------------------//
    private void addSubGroup()
    {
        AssemblyItemService.AddAssemblyListToSubGroup(SubGroup.SubGroupTitle);
        AssemblyItemService.ClearAssemblyItemList();

        SubGroup = new SubGroupViewModel();
        Item = new AssemblyItemViewModel();

    }
    //---------------------------------------------------------------------------------------------------------//
    public void Dispose()
    {
        ItemService.OnChange -= StateHasChanged;
    }
    //---------------------------------------------------------------------------------------------------------//
    public void LoadItems()
    {
        ItemService.LoadItems();
    }

    //-------------------------------------...ooo000 END OF CODE 000ooo...-------------------------------------//
}

@inject ISubGroupService SubGroupService
@inject IQuoteService QuoteService
@inject AuthenticationStateProvider AuthenticationStateProvider

@using CRT_WebApp.Shared
@implements IDisposable;

<div class="row" style="margin-top:2px">
    <div class="col-6">
        @foreach (var sub in SubGroupService.SubGroups)
        {
            <div style="margin-top:2px">
                <SubGroup subGroup=sub></SubGroup>
            </div>
        }
    </div>
    <div class="col-4">
        <EditForm Model="@quote" OnValidSubmit="@addQuote">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="inputGroup-sizing-default">Quote Name: </span>
                </div>
                <InputText class="form-control" type="text" aria-label="Sizing example input"
                           aria-describedby="inputGroup-sizing-default" @bind-Value="quote.QuoteTitle" />
                <div class="input-group-append">
                    <button class="btn btn-success" type="submit">Create Quote</button>
                </div>
                <div class="input-group-append">
                    <button class="btn btn-success" @onclick="@updateQuote" type="submit">Update</button>
                </div>
            </div>

            <label>
                Quote Total: $@SubGroupService.GetSubGroupsTotal()
            </label>
        </EditForm>
    </div>
</div>


@code {
    [Parameter]
    public SubGroupModel subGroup { get; set; }

    QuoteViewModel quote = new QuoteViewModel();

    string userID;

    protected async override void OnInitialized()
    {
        SubGroupService.OnChange += StateHasChanged;
        await GetUser();
    }


    public void Dispose()
    {
        SubGroupService.OnChange -= StateHasChanged;
    }

    public void addQuote()
    {
        QuoteModel newQuote = new QuoteModel
        {
            QuoteTitle = quote.QuoteTitle,
            QuoteState = true,
            QuoteDate = DateTime.Now,
            QuoteUser = userID,
            SubGroups = SubGroupService.GetSubGroupList(),
            Total = Convert.ToDouble(SubGroupService.GetSubGroupsTotal()),
            IsDeleted = false
        };

        QuoteService.AddQuote(newQuote);

        quote = new QuoteViewModel();
        SubGroupService.SubGroups.Clear();
    }

    public void updateQuote()
    {
        QuoteModel newQuote = new QuoteModel
        {
            Id = quote.Id,
            QuoteTitle = quote.QuoteTitle,
            QuoteState = true,
            QuoteDate = DateTime.Now,
            QuoteUser = userID,
            SubGroups = SubGroupService.GetSubGroupList(),
            Total = Convert.ToDouble(SubGroupService.GetSubGroupsTotal()),
            IsDeleted = false
        };
    }

    private async Task GetUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userID = user.Identity.Name;
    }
}

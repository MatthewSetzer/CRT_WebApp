@using Microsoft.Extensions.Logging
@inject ILogger<TestComponentForModel> Logger
@inject IItemService ItemService
@implements IDisposable;
<h3>TestPageForModel</h3>


<EditForm Model="@Item" OnValidSubmit="@onSubmit">
        <DataAnnotationsValidator />
    <ValidationSummary />
       @* <div class="input-group mb-3">
        <input class="form-control" type="text" list="itemList" />
        <datalist id="itemList" @onchange="@((args) => Item.Description = args.Value.ToString())">
            @for (var i = 0; i < ItemService.Items.Count; i++)
            {
                <option value="@ItemService.Items[i].Description" />
            }
        </datalist>
    </div>*@

    <InputText id="Item" @bind-Value=Item.Description list="itemList">
        @*
        @foreach (var item in ItemService.Items)
        {
        <option value="@item.Description">@item.Description</option>
        }*@
                <datalist id="itemList" @onchange="@((args) => Item.Description = args.Value.ToString())">
            @for (var i = 0; i < ItemService.Items.Count; i++)
            {
                <option value="@ItemService.Items[i].Description" />
            }
        </datalist>


    </InputText>
    <br />
    <br />
    <div class="input-group mb-3">
        <select class="custom-select" id="metricSelect">
            <option selected>Select...</option>
            <option value="1">Quantity</option>
            <option value="2">Linear Foot</option>
            <option value="3">Square Foot</option>
        </select>
        <InputNumber id="Quantity" @bind-Value="Item.Quantity"></InputNumber>

    </div>

    <button class="btn btn-secondary" type="submit">Submit</button>
</EditForm>

@code {
    private AssemblyItemViewModel Item =new();
    private void onSubmit()
    {
        Logger.LogInformation("on submit called");
        Console.WriteLine("submitted" + Item.Quantity+ Item.Description);
    }

    //---------------------------------------------------------------------------------------------------------//
    protected override void OnInitialized()
    {
        ItemService.OnChange += StateHasChanged;
        LoadItems();
    }
    //---------------------------------------------------------------------------------------------------------//
    public void Dispose()
    {
        ItemService.OnChange -= StateHasChanged;
    }
    //---------------------------------------------------------------------------------------------------------//
    public void LoadItems()
    {
        ItemService.LoadItems();
    }
}
